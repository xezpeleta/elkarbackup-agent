{
  "name": "windows-service-manager",
  "version": "0.1.1",
  "description": "A node module to query, stop (optionally forcefully) and start Windows services",
  "main": "windows-service-manager.js",
  "scripts": {
    "test": "echo \"no tests are included in this package\" && exit 1",
    "sample": "sample.js"
  },
  "keywords": [
    "Windows",
    "Service"
  ],
  "homepage": "https://github.com/tbenbrahim/windows-service-manager",
  "bugs": {
    "url": "https://github.com/tbenbrahim/windows-service-manager/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tbenbrahim/windows-service-manager.git"
  },
  "os": [
    "win32"
  ],
  "author": {
    "name": "Tony BenBrahim"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "## Windows Service Manager\r\nA node module to query, start and stop Windows services. Uses the `sc` and `taskkill` programs which is present \r\non every version of Windows since Windows XP.\r\n\r\n## Usage\r\n\r\n### Service objects\r\nThe functions return service objects containing the following fields:\r\n\r\n* `name`: the service name\r\n* `description`: the optional service description, may not be present\r\n* `state`: an integer state code with the following possible values\r\n\t* 1: STOPPED\r\n\t* 2: STOP PENDING\r\n\t* 3: START PENDING\r\n\t* 4: STARTED\r\n\t* 5: CONTINUE PENDING\r\n\t* 6: PAUSE PENDING\r\n\t* 7: PAUSED\r\n* `stateDescription`: the textual description of the state as shown above\r\n* `pid`: the process identifier for the service, if it is running\r\n\r\n### Query all services\r\n`queryServices` asynchronously returns an array of service objects, for all services installed on the system.\r\n\r\n**Parameters:**\r\n\r\n* `callback`: a callback function  `function(error, service)`:\r\n\t* `error`: error that occured or null if no error\r\n\t* `service`: an array of service objects for all installed services.\r\n\r\n**Example:**\r\n\r\n    var serviceManager = require('./windows-service-manager');\r\n    \r\n    serviceManager.queryServices(function(error, services) {\r\n        console.log(error || services);\r\n    });\r\n\r\n### Query a single service\r\n`queryService` asynchronously returns an service object for the service with the specified name.\r\n\r\n**Parameters:**\r\n\r\n* `name`: the name of the service to query.\r\n* `callback`: a callback function  `function(error, service)`:\r\n\t* `error`: error that occured or null if no error\r\n\t* `service`: a service object for the service named `name`.\r\n\r\n**Example:**\r\n\r\n    var serviceManager = require('./windows-service-manager');\r\n    \r\n    serviceManager.queryService('puppet' ,function(error, services) {\r\n        console.log(error || services);\r\n    });\r\n\r\n### Start a service\r\n`startService` asynchronously starts a service with the specified `name`. If the service is already started, no error is returned. \r\n\r\n**Parameters:**\r\n\r\n* `name`: the name of the service to start.\r\n* `timeoutSeconds`: number of seconds to poll before returning. If 0, no polling is done. If a non-zero value, service status is \r\npolled. If the service has not started before the timeout expires, the callback error will be the string 'timeout'.\r\n* `callback`: a callback function  `function(error, service)`:\r\n\t* `error`: error that occured or null if no error\r\n\t* `service`: a service object for the service named `name`.\r\n\r\n**Example:**\r\n\r\n    var serviceManager = require('./windows-service-manager');\r\n    \r\n    serviceManager.startService('puppet', 5, function(error, services) {\r\n        console.log(error || services);\r\n    });\r\n\r\n### Stop a service\r\n`stopService` asynchronously stops a service with the specified `name`. If the service is already stopped, no error is returned. \r\n\r\n**Parameters:**\r\n\r\n* `name`: the name of the service to stop.\r\n* `timeoutSeconds`: number of seconds to poll before returning. If 0, no polling is done. If a non-zero value, service status is \r\npolled. If the service has not stopped before the timeout expires, the callback error will be the string 'timeout'.\r\n* `forceKill`: boolean that specifies whether the service process should be killed if the service has not stopped within a non zero timeout interval.\r\n* `callback`: a callback function  `function(error, service)`:\r\n\t* `error`: error that occured or null if no error\r\n\t* `service`: a service object for the service named `name`.\r\n\r\n**Example:**\r\n\r\n    var serviceManager = require('./windows-service-manager');\r\n    \r\n    serviceManager.stopService('puppet', 20, true, function(error, services) {\r\n        console.log(error || services);\r\n    });\r\n\r\n",
  "_id": "windows-service-manager@0.1.1",
  "dist": {
    "shasum": "837d9f2bccef36cd0f303b74c06ffdae3e0871c5"
  },
  "_from": "windows-service-manager@~0.1.1",
  "_resolved": "https://registry.npmjs.org/windows-service-manager/-/windows-service-manager-0.1.1.tgz"
}
